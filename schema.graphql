schema {
  query: QueryRoot
  mutation: Mutation
}

"""
Indicates that an Input Object is a OneOf Input Object (and thus requires
                        exactly one of its field be provided)
"""
directive @oneOf on INPUT_OBJECT

type BasicGroup {
  defaultSettings: Int!
  description: String
  groupType: BasicGroupKind!
  name: String!
  options: [BasicOptionItem!]!
  priority: Int!
}

enum BasicGroupKind {
  IMC
  MULTI
  SINGLE
}

type BasicOptionItem {
  description: String
  imagePath: String
  name: String!
}

scalar BatchList

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

enum DownloadKind {
  INSTALL
  UPDATE
}

type ExtraFile {
  path: String!
  size: Int!
}

type ExtraFileArchive {
  files: [ExtraFile!]!
  hash: String!
  id: UUID!
  name: String!
  sizeCompressed: Int!
}

scalar FileList

scalar FileSwaps

input FilterInfo {
  nsfl: Boolean!
  nsfw: Boolean!
  paid: Boolean!
}

type FullUser {
  email: String!
  emailVerified: Boolean!
  hashes: [String!]!
  id: UUID!
  installQueue: [Version!]!
  isPatreonCreator: Boolean!
  level: UserLevel!
  maxUploadSize: Int!
  patreonConnected: Boolean!
  patreonTiers(force: Boolean!): [Tier!]
  profile: Profile!
  subscriber: Boolean!
  tasks: [Task!]!
  templates: [Template!]!
  tokenId: Int!
  tokens: [Token!]!
  totpEnabled: Boolean!
  usedStorage: Int!
  usedVanityUrls: Int!
  username: String!
  vanityUrl: String
  vanityUrls: Int!
  verificationLevel: VerificationLevel!
  webhook: Webhook
}

type Group implements GroupInterface {
  defaultSettings: Int!
  description: String
  groupType: GroupType!
  name: String!
  options: [OptionItem!]!
  originalIndex: Int!
  priority: Int!
  version: Int
}

type GroupContainer {
  imc: [GroupImc!]!
  standard: [Group!]!
}

type GroupImc implements GroupInterface {
  allVariants: Boolean!
  defaultEntry: JSON!
  defaultSettings: Int!
  description: String
  groupType: GroupType!
  identifier: JSON!
  name: String!
  options: [OptionItemImc!]!
  originalIndex: Int!
  priority: Int!
  version: Int
}

interface GroupInterface {
  defaultSettings: Int!
  description: String
  groupType: GroupType!
  name: String!
  originalIndex: Int!
  priority: Int!
  version: Int
}

type GroupManipulations {
  name: String
  options: [OptionManipulations!]!
}

enum GroupType {
  IMC
  MULTI
  SINGLE
}

type Image {
  displayOrder: Int!
  dominantColours(limit: Int = null): [Int!]
  hash: String!
  id: Int!
  thumbhash: Thumbhash
}

enum InstallQueueUpdate {
  ADD
  REMOVE
}

scalar InstallerImageList

type InstallerImages {
  baseUri: String!
  images: InstallerImageList!
}

"""A scalar that can represent any JSON value."""
scalar JSON

"""A scalar that can represent any JSON Object value."""
scalar JSONObject

type LoginResponse {
  id: UUID!
  token: String!
  username: String!
}

type Migration {
  currentStatus: MigrationStatus
  date: DateTime!
  defaultStatus: MigrationStatus!
  description: String!
  id: Int!
  name: String!
}

enum MigrationStatus {
  OPT_IN
  OPT_OUT
}

type Mutation {
  copyExtraFiles(from: UUID!, to: UUID!): Int!
  createPackage(package: PackageInput!): Package!
  createPatreonDownloadKey(packageId: UUID!): String
  createTemplate(input: TemplateInput!): UUID!
  createVariant(input: VariantInput!): Variant!
  deleteAllTokens(except: Int): Int!
  deleteExtraFile(id: UUID!): Int!
  deleteImages(ids: [Int!]!): Int!
  deletePackage(id: UUID!, reason: String = null): Int!
  deleteTemplate(id: UUID!): Int!
  deleteToken(id: Int!): Int!
  deleteUser: Int!
  deleteVariant(id: UUID!): Int!
  deleteVersion(id: UUID!): Int!
  dismissReport(id: UUID!, reason: String!): Int!
  login(password: String!, totpCode: String, username: String!): LoginResponse!
  logout: Int!
  register(email: String!, password: String!, token: String!, username: String!): RegisterResponse!
  reorderImages(ordering: JSONObject!): Int!
  report(packageId: UUID!, report: JSON!, token: String!): Int!
  requestVerification(description: String!, name: String!): Int!
  resendEmailVerification(token: String!): Int!
  setMigrationPreference(migrationId: Int!, preference: MigrationStatus!): Int!
  updateInstallQueue(updates: [UpdateInstallQueueInput!]!): Int!
  updatePackage(id: UUID!, update: UpdatePackageInput!): Int!
  updateProfile(update: UpdateProfileInput!): Int!
  updateTemplate(id: UUID!, update: UpdateTemplateInput!): Int!
  updateTotpSettings(change: JSON!): JSON!
  updateUser(update: UpdateUserInput!): Int!
  updateUserWebhook(webhook: WebhookInput): Int!
  updateVariant(id: UUID!, input: UpdateVariantInput!): Int!
  updateVariantDisplayOrders(packageId: UUID!, variantIdsInOrder: [UUID!]!): Int!
  updateVerificationRequest(accepted: Boolean!, requesterId: UUID!): Int!
  updateVersion(id: UUID!, input: UpdateVersionInput!): Int!
}

type NeededFiles {
  baseUri: String!
  files: FileList!
  manipulations: [GroupManipulations!]!
  modHash: String
}

interface OptionInterface {
  description: String
  name: String!
}

type OptionItem implements OptionInterface {
  description: String
  fileSwaps: FileSwaps!
  gamePaths: [String!]!
  imagePath: String
  isDefault: Boolean!
  manipulations: [JSON!]!
  name: String!
  priority: Int!
}

type OptionItemImc implements OptionInterface {
  attributeMask: Int
  description: String
  isDisableSubMod: Boolean
  name: String!
}

type OptionItemSimple {
  fileSwaps: FileSwaps!
  gamePaths: [String!]!
  imagePath: String
  isDefault: Boolean!
  manipulations: [JSON!]!
  version: Int
}

type OptionManipulations {
  manipulations: [JSON!]!
  name: String
}

scalar Options

enum Order {
  CREATED_AT
  DOWNLOADED_AT
  DOWNLOADS
  DOWNLOADS_AVERAGE
  DOWNLOADS_LAST_MONTH
  SIMILARITY
  UPDATED_AT
}

type Package {
  auditLog: [PackageAuditLogEntry!]!
  createdAt: DateTime!
  description: String!
  downloads: Int!
  id: UUID!
  images: [Image!]!
  name: String!
  nsfw: RestrictedInfo!
  patreon: Boolean!
  patreonTiers: [String!]!
  permissions: String
  rawVanityUrl: String
  tagline: String!
  tags: [Tag!]!
  updatedAt: DateTime!
  user: User!
  userId: UUID!
  userIsEntitled: Boolean!
  vanityUrl: String
  variants: [Variant!]!
  visibility: PackageVisibility!
  webhook: Webhook
}

type PackageAuditLogEntry {
  explanation: String!
  reason: String!
  timestamp: DateTime!
}

input PackageInput {
  description: String!
  name: String!
  patreon: Boolean! = false
  patreonTiers: [String!]! = []
  permissions: String
  tagline: String!
  tags: [String!]!
  visibility: PackageVisibility!
  webhook: WebhookInput = null
}

enum PackageVisibility {
  DRAFT

  """Hidden by a moderator."""
  HIDDEN
  PRIVATE
  PUBLIC
  UNLISTED
}

type PaginatedPackages {
  packages: [Package!]!
  pageInfo: SimplePageInfo!
}

type Profile {
  accent: String
  avatarId: String
  description: String
  links: JSON!
  shape: String!
  thumbhash: Thumbhash
}

type QueryRoot {
  categoryTags: [Tag!]!
  checkVanityUrl(kind: VanityUrlKind!, slug: String!): UUID
  convertVariantId(id: Int!): UUID
  convertVersionId(id: Int!): UUID
  featuredPackages(count: Int!, filterInfo: FilterInfo, page: Int!): PaginatedPackages!
  getVersion(id: UUID!): Version
  me: FullUser
  migrations: [Migration!]!
  moderatorPackages(count: Int!, page: Int!, visibility: PackageVisibility!): PaginatedPackages!
  package(id: UUID!): Package
  packages(count: Int!, filterInfo: FilterInfo, page: Int!): PaginatedPackages!
  recentlyDownloadedPackages(count: Int!, filterInfo: FilterInfo, page: Int!): RecentPackages!
  recentlyUpdatedPackages(count: Int!, filterInfo: FilterInfo, page: Int!): RecentPackages!
  reports: [StoredReport!]!
  reportsDismissed: [StoredReport!]!
  searchAffects(query: String!): [String!]!
  searchTags(query: String!): [TagSearchResult!]!
  searchVersions(amount: Int! = 9, filterInfo: FilterInfo, info: SearchRequest!, page: Int): SearchResult!
  task(id: UUID!): Task
  template(id: UUID!): Template
  user(id: UUID!): User
  userModerationView(id: UUID!): UserModerationView
  variant(id: UUID!): Variant
  variants(ids: [UUID!]!): [Variant!]!
  verificationRequests: [VerificationRequest!]!
  verificationRequestsDismissed: [VerificationRequest!]!
}

type RecentPackage {
  package: Package!
  timestamp: DateTime!
}

type RecentPackages {
  packages: [RecentPackage!]!
  pageInfo: SimplePageInfo!
}

type RegisterResponse {
  id: UUID!
  token: String!
  username: String!
}

type RestrictedInfo {
  nsfl: Boolean!
  nsfw: Boolean!
}

enum SearchDirection {
  ASCENDING
  DESCENDING
}

input SearchRequest {
  affects: [String!]! = []
  author: String = null
  direction: SearchDirection! = DESCENDING
  excludeTags: [String!]! = []
  includeTags: [String!]! = []
  name: String = null
  order: Order!
  subscriber: SubscriberStatus! = ALL
}

type SearchResult {
  pageInfo: SimplePageInfo!
  versions: [Version!]!
}

type SimplePageInfo {
  next: Boolean!
  prev: Boolean!
  total: Int!
}

type StoredReport {
  createdAt: DateTime
  dismissalReason: String
  dismisser: User
  dismisserId: UUID
  id: UUID!
  package: Package
  packageId: UUID!
  report: JSON!
  reporter: User
  reporterId: UUID
}

enum SubscriberStatus {
  ALL
  NON_SUBSCRIBER
  SUBSCRIBER
}

type Tag {
  category: Boolean!
  slug: String!
}

type TagSearchResult {
  category: Boolean!
  packages: Int!
  slug: String!
}

type Task {
  createdAt: DateTime!
  id: UUID!
  kind: String!
  output: JSON!
  retries: Int!
  scheduledFor: DateTime!
  status: TaskStatus!
  updatedAt: DateTime!
}

enum TaskStatus {
  FAILURE
  QUEUED
  RUNNING
  SUCCESS
}

type Template {
  description: String
  id: UUID!
  modName: String
  patreon: Boolean!
  patreonTiers: [String!]!
  permissions: String
  tagline: String
  tags: [String!]!
  templateName: String!
  variables: [String!]!
  visibility: PackageVisibility!
}

input TemplateInput {
  description: String
  modName: String
  patreon: Boolean!
  patreonTiers: [String!]!
  permissions: String
  tagline: String
  tags: [String!]!
  templateName: String!
  variables: [String!]!
  visibility: PackageVisibility!
}

type Thumbhash {
  hash: String!
  height: Int!
  width: Int!
}

type Tier {
  amountUsdCents: Int!
  id: String!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type Token {
  city: String
  continent: String
  country: String
  id: Int!
  updatedAt: DateTime!
  userAgent: String
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input UpdateInstallQueueInput {
  action: InstallQueueUpdate!
  versionId: UUID!
}

input UpdatePackageInput {
  addTags: [String!]! = []
  description: String
  name: String
  patreon: Boolean
  patreonTiers: [String!]
  permissions: JSON!
  reason: String = null
  removeTags: [String!]! = []
  tagline: String
  vanityUrl: JSON!
  visibility: PackageVisibility
  webhook: JSON! = "{\"kind\":\"ignore\"}"
}

input UpdateProfileInput {
  accent: JSON!
  description: JSON!
  links: JSON
  shape: String
  vanityUrl: JSON!
}

input UpdateTemplateInput {
  description: JSON!
  modName: JSON!
  patreon: Boolean
  patreonTiers: [String!]
  permissions: JSON!
  tagline: JSON!
  tags: [String!]
  templateName: String
  variables: [String!]
  visibility: PackageVisibility
}

input UpdateUserInput {
  email: String
  newPassword: String
  password: String!
  username: String
}

input UpdateVariantInput {
  name: String = null
}

input UpdateVersionInput {
  changelog: JSON! = "{\"kind\":\"ignore\"}"
  dependencies: JSON = null
  variant: UUID = null
  version: String = null
}

type User {
  id: UUID!
  packages(count: Int!, filterInfo: FilterInfo, page: Int!): PaginatedPackages!
  patreonPledgeUrl: String
  patreonTiers: [Tier!]
  profile: Profile!
  subscriber: Boolean!
  username: String!
  vanityUrl: String
}

enum UserLevel {
  ADMIN
  MODERATOR
  USER
}

type UserModerationView {
  email: String!
  id: UUID!
  subscriber: Boolean!
  username: String!
  vanityUrl: String
}

enum VanityUrlKind {
  MOD
  USER
}

type Variant {
  displayOrder: Int!
  id: UUID!
  name: String!
  package: Package!
  packageId: UUID!
  versions(limit: Int): [Version!]!
}

input VariantInput {
  name: String!
  packageId: UUID!
}

enum VerificationLevel {
  DENIED
  IN_PROGRESS
  UNVERIFIED
  VERIFIED
}

type VerificationRequest {
  accepted: Boolean
  createdAt: DateTime!
  responses: JSON!
  reviewer: User
  reviewerId: UUID
  user: UserModerationView
  userId: UUID!
}

type Version {
  affects: [String!]!
  basicGroups: [BasicGroup!]!
  batched: Boolean!
  batches: BatchList!
  changelog: String
  createdAt: DateTime!
  defaultOption: OptionItemSimple
  dependencies: JSON!
  downloadSize: Int!
  downloads: Int!
  extraFiles: [ExtraFileArchive!]!
  fullDependencies: JSON!
  gamePaths: [String!]!
  groups: GroupContainer!
  id: UUID!
  installSize: Int!
  installerImages: InstallerImages!
  neededFiles(download: Boolean = null, downloadKey: String = null, downloadKind: DownloadKind = null, full: Boolean, options: Options): NeededFiles!
  updatedAt: DateTime!
  variant: Variant!
  variantId: UUID!
  version: String!
}

type Webhook {
  createdAt: DateTime!
  id: Int!
  nsfwImages: Boolean!
  packageId: UUID
  url: String!
  userId: UUID
}

input WebhookInput {
  nsfwImages: Boolean!
  url: String!
}
